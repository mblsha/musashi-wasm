/**
 * Browser Compatibility Test for musashi-wasm
 * 
 * This test demonstrates that the current musashi-wasm build (0.1.4)
 * has hardcoded Node.js dependencies that prevent it from working in browsers.
 * 
 * The issue: musashi-loader.mjs has ENVIRONMENT_IS_NODE hardcoded to true,
 * causing it to always import Node.js-specific modules like 'module' and 'fs'.
 */

describe('Browser Compatibility', () => {
  describe('Environment Detection', () => {
    test('should detect current test environment', () => {
      const isNode = typeof process !== 'undefined' && 
                     process.versions && 
                     process.versions.node;
      const hasBrowserGlobals = typeof window !== 'undefined' || 
                                typeof document !== 'undefined';
      
      console.log('Environment:', {
        isNode,
        hasBrowserGlobals,
        processExists: typeof process !== 'undefined',
        windowExists: typeof window !== 'undefined',
        documentExists: typeof document !== 'undefined'
      });
      
      expect(isNode || hasBrowserGlobals).toBeTruthy();
    });
  });

  describe('musashi-wasm Module Loading', () => {
    test('should load in Node.js environment', async () => {
      const isNode = typeof process !== 'undefined' && 
                     process.versions && 
                     process.versions.node;
      
      if (!isNode) {
        console.log('Skipping Node.js test in browser environment');
        return;
      }
      
      // In Node.js, the module should load successfully
      let loadError = null;
      let module = null;
      
      try {
        // Try to import the built module using dynamic import (ESM)
        const { default: createModule } = await import('../../musashi-node.out.mjs');
        module = await createModule();
        expect(module).toBeDefined();
        expect(module._m68k_init).toBeDefined();
      } catch (error) {
        loadError = error;
        console.log('Module loading error:', error.message);
      }
      
      // In Node.js, the module should load if it exists
      if (loadError) {
        // Module might not be built yet, which is ok for this test
        console.log('Note: musashi-node.out.mjs not found. Run ./build.sh to build it.');
        expect(loadError.message).toMatch(/Cannot find module|not found/i);
      } else {
        expect(module).toBeDefined();
      }
    });
    
    test('should fail in browser-like environment due to Node.js dependencies', async () => {
      // This test simulates what happens in a browser environment
      // where Node.js modules are not available
      
      const isNode = typeof process !== 'undefined' && 
                     process.versions && 
                     process.versions.node;
      
      if (isNode) {
        console.log('Simulating browser environment issues in Node.js');
        
        // The issue is that musashi-loader.mjs contains:
        // const { createRequire } = await import('module');
        // This will fail in browsers because 'module' doesn't exist
        
        // We can't fully simulate this in Node.js, but we can document it
        const problematicCode = `
          // From musashi-loader.mjs (generated by Emscripten)
          var ENVIRONMENT_IS_NODE = true;  // <-- Hardcoded!
          
          if (ENVIRONMENT_IS_NODE) {
            const { createRequire } = await import('module');  // <-- Fails in browser!
            var require = createRequire(import.meta.url);
          }
        `;
        
        console.log('Problematic code that prevents browser usage:', problematicCode);
        
        // This is the error browsers would see:
        const expectedBrowserError = "TypeError: Failed to resolve module specifier 'module'";
        console.log('Expected browser error:', expectedBrowserError);
        
        // Document the issue
        expect(problematicCode).toContain('ENVIRONMENT_IS_NODE = true');
        expect(problematicCode).toContain("import('module')");
      } else {
        // In an actual browser environment (like jsdom or happy-dom in tests)
        console.log('Testing in browser-like environment');
        
        let loadError = null;
        try {
          // This would fail with module resolution error
          const module = await import('../../musashi.out.mjs');
          await module.default();
        } catch (error) {
          loadError = error;
          console.log('Browser loading error:', error.message);
        }
        
        // We expect an error in browser environment
        expect(loadError).toBeDefined();
        expect(loadError.message).toMatch(/module|createRequire|not defined/i);
      }
    });
  });

  describe('Required Fixes', () => {
    test('should document the required fix for browser compatibility', () => {
      const requiredFix = {
        problem: 'ENVIRONMENT_IS_NODE is hardcoded to true in musashi-loader.mjs',
        cause: 'Emscripten build configuration not detecting environment properly',
        solution: 'Build needs to generate environment detection code instead of hardcoding',
        workaround: 'Use separate builds for Node.js and browser, or patch the loader',
        
        // The loader should have code like this:
        properEnvironmentDetection: `
          var ENVIRONMENT_IS_NODE = (
            typeof process == 'object' && 
            typeof process.versions == 'object' && 
            typeof process.versions.node == 'string'
          );
          var ENVIRONMENT_IS_WEB = typeof window == 'object';
          var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
        `,
        
        // Emscripten flags that might help:
        emscriptenFlags: [
          '-s ENVIRONMENT=web,webview,worker,node',
          '-s SINGLE_FILE=0',  // Don't embed WASM in JS
          '-s MODULARIZE=1',
          '-s EXPORT_ES6=1'
        ]
      };
      
      console.log('Browser Compatibility Fix Required:', JSON.stringify(requiredFix, null, 2));
      
      // These assertions document the issue
      expect(requiredFix.problem).toContain('hardcoded');
      expect(requiredFix.solution).toContain('environment detection');
      expect(requiredFix.emscriptenFlags).toContain('-s ENVIRONMENT=web,webview,worker,node');
    });
  });
});
