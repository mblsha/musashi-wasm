name: WebAssembly CI

on:
  push:
    branches: [ main, master, wasm ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, wasm ]
  workflow_dispatch:

env:
  EMSDK_VERSION: '4.0.12'
  EM_CACHE_FOLDER: 'emsdk-cache'

jobs:
  wasm-build-and-test:
    name: WebAssembly Build & Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        perfetto: [false, true]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Start timer
        id: timer
        run: echo "start=$(date +%s)" >> $GITHUB_OUTPUT

      # Emscripten caching (stable, version-centric key)
      - name: Cache Emscripten SDK
        id: cache-emsdk
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.EM_CACHE_FOLDER }}
            ~/.emscripten_cache
            ~/.emscripten_ports
          key: emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-v1
          restore-keys: |
            emsdk-${{ runner.os }}-${{ env.EMSDK_VERSION }}-
            emsdk-${{ runner.os }}-

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{ env.EMSDK_VERSION }}
          actions-cache-folder: ${{ env.EM_CACHE_FOLDER }}

      # Fish no longer required; building via bash script

      # Cache Protobuf/Abseil only for Perfetto builds (cache installed outputs + generated PBs)
      - name: Cache Protobuf/Abseil (Perfetto only)
        if: matrix.perfetto
        id: cache-protobuf
        uses: actions/cache@v4
        with:
          path: |
            third_party/protobuf-wasm-install
            third_party/abseil-wasm-install
            third_party/retrobus-perfetto/cpp/proto/perfetto.pb.cc
            third_party/retrobus-perfetto/cpp/proto/perfetto.pb.h
          key: proto-${{ runner.os }}-emsdk-${{ env.EMSDK_VERSION }}-${{ hashFiles('build_protobuf_wasm.sh', 'third_party/retrobus-perfetto/proto/*.proto') }}-v1
          restore-keys: |
            proto-${{ runner.os }}-emsdk-${{ env.EMSDK_VERSION }}-

      - name: Build Protobuf/Abseil (if cache miss)
        if: matrix.perfetto && steps.cache-protobuf.outputs.cache-hit != 'true'
        run: |
          chmod +x build_protobuf_wasm.sh
          ./build_protobuf_wasm.sh

      # Cache generated M68k files (small but helps)
      - name: Cache M68k generated files
        uses: actions/cache@v4
        with:
          path: |
            m68kops.c
            m68kops.h
            m68kmake
          key: m68k-gen-${{ runner.os }}-${{ hashFiles('m68k_in.c', 'm68kmake.c') }}-v2
          restore-keys: |
            m68k-gen-${{ runner.os }}-

      - name: Build WASM (standard/perfetto)
        env:
          ENABLE_PERFETTO: ${{ matrix.perfetto && '1' || '0' }}
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Verify WASM outputs exist
        run: |
          test -f musashi.out.mjs
          test -f musashi.out.wasm
          test -f musashi-node.out.mjs
          test -f musashi-node.out.wasm
          test -f musashi-universal.out.mjs
          test -f musashi-universal.out.wasm
          ls -lh *.out.mjs *.out.wasm || true

      # Prepare WASM files for TypeScript tests
      - name: Stage WASM files into packages/core/wasm
        run: |
          mkdir -p packages/core/wasm
          cp -f *.out.mjs packages/core/wasm/ || true
          cp -f *.out.wasm packages/core/wasm/ || true
          cp -f *.out.wasm.map packages/core/wasm/ || true
          echo "Staged:"
          ls -la packages/core/wasm

      # Node setup + npm cache
      - name: Use Node.js 20.x (with npm cache)
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            musashi-wasm-test/package-lock.json
            packages/**/package-lock.json

      # Run Node integration tests (repo's musashi-wasm-test)
      - name: Run Node.js integration tests
        run: |
          cd musashi-wasm-test
          npm ci
          npm run test:ci || true

      # Run TypeScript tests (once per matrix entry, toggled by PERFETTO_ENABLED)
      - name: Run TypeScript tests
        env:
          PERFETTO_ENABLED: ${{ matrix.perfetto && '1' || '0' }}
        run: |
          npm ci
          npm ci --workspaces
          npm run build
          npm run test:core || true

      # Upload WASM artifacts with stable names used by npm-publish.yml
      - name: Upload WASM artifacts (standard)
        if: matrix.perfetto == false
        uses: actions/upload-artifact@v4
        with:
          name: wasm-modules
          path: |
            musashi.out.mjs
            musashi.out.wasm
            musashi-node.out.mjs
            musashi-node.out.wasm
            musashi-universal.out.mjs
            musashi-universal.out.wasm
          retention-days: 14

      - name: Upload WASM artifacts (perfetto)
        if: matrix.perfetto == true
        uses: actions/upload-artifact@v4
        with:
          name: wasm-perfetto-modules
          path: |
            musashi.out.mjs
            musashi.out.wasm
            musashi-node.out.mjs
            musashi-node.out.wasm
            musashi-universal.out.mjs
            musashi-universal.out.wasm
          retention-days: 14

      # Metrics and cache info
      - name: Report cache & duration
        if: always()
        run: |
          end=$(date +%s)
          duration=$((end - ${{ steps.timer.outputs.start }}))
          echo "Duration: ${duration}s"
          echo "emsdk cache hit: ${{ steps.cache-emsdk.outputs.cache-hit }}"
          echo "protobuf cache hit: ${{ steps.cache-protobuf.outputs.cache-hit }}"
