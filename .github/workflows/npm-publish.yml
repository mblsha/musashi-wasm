name: Publish to npm

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 4.10.0)'
        required: true
        type: string
      tag:
        description: 'npm tag (latest, beta, next)'
        required: false
        default: 'latest'
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '3.1.46'

      - name: Install fish shell
        run: |
          sudo apt-add-repository ppa:fish-shell/release-3
          sudo apt-get update
          sudo apt-get install -y fish

      - name: Build native components
        run: |
          make clean
          make -j$(nproc)

      - name: Build standard WASM
        run: |
          ./build_wasm_simple.sh
          mkdir -p npm-package/dist
          cp musashi-node.out.wasm npm-package/dist/musashi.wasm
          cp musashi-node.out.wasm.map npm-package/dist/musashi.wasm.map
          cp musashi-node.out.js npm-package/dist/musashi-loader.js

      - name: Build Perfetto WASM
        run: |
          # Generate protobuf files first
          mkdir -p third_party/retrobus-perfetto/proto
          third_party/protobuf-3.21.12/build.host/protoc \
            --cpp_out=third_party/retrobus-perfetto/proto \
            -I third_party/retrobus-perfetto/proto \
            third_party/retrobus-perfetto/proto/perfetto.proto
          
          cp third_party/retrobus-perfetto/cpp/proto/perfetto.pb.* third_party/retrobus-perfetto/proto/
          
          # Build with Perfetto
          ./build_perfetto_wasm_simple.sh
          cp musashi-node.out.wasm npm-package/dist/musashi-perfetto.wasm
          cp musashi-node.out.wasm.map npm-package/dist/musashi-perfetto.wasm.map
          cp musashi-node.out.js npm-package/dist/musashi-perfetto-loader.js

      - name: Generate wrapper modules
        run: |
          cd npm-package
          npm install
          node scripts/generate-wrapper.js

      - name: Run tests
        run: |
          cd npm-package
          npm test

      - name: Set version
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd npm-package
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Publish to npm
        run: |
          cd npm-package
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            npm publish --tag ${{ github.event.inputs.tag }}
          else
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-dry-run:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: '3.1.46'

      - name: Install fish shell
        run: |
          sudo apt-add-repository ppa:fish-shell/release-3
          sudo apt-get update
          sudo apt-get install -y fish

      - name: Build native components
        run: |
          make clean
          make -j$(nproc)

      - name: Build WASM modules
        run: |
          ./build_wasm_simple.sh
          mkdir -p npm-package/dist
          cp musashi-node.out.wasm npm-package/dist/musashi.wasm
          cp musashi-node.out.wasm.map npm-package/dist/musashi.wasm.map
          cp musashi-node.out.js npm-package/dist/musashi-loader.js

      - name: Generate wrapper modules
        run: |
          cd npm-package
          npm install
          node scripts/generate-wrapper.js

      - name: Pack package
        run: |
          cd npm-package
          npm pack --dry-run
          npm pack
          echo "Package contents:"
          tar -tzf *.tgz